# -*- coding: utf-8 -*-
"""main.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1lFqxfxnkWMncXcIp037iVMwUgjNio7ZM
"""

import pandas as pd

# Data load
data = pd.read_csv("dataset.csv")
data.head()

# DataFrame data types
print(data.info())

# Counting blank values
missing_values_per_column = data.isnull().sum()
print(missing_values_per_column)

# Checing if there are duplicates apears in the data set
print(f"The number of duplicate values ​​is: {data.duplicated().sum()}")

# Renaming columns to be more descriptive
data.rename(columns={
    "Own_car": "Has_car",
    "Own_property": "Has_property",
    "Work_phone": "Has_work_phone",
    "Phone": "Has_phone",
    "Email": "Has_email",
    "Unemployed": "Is_unemployed",
    "Num_children": "Number_of_children",
    "Num_family": "Family_size",
    "Account_length": "Account_duration",
    "Total_income": "Income",
    "Age": "Age_years",
    "Years_employed": "Years_of_employment",
    "Income_type": "Type_of_income",
    "Education_type": "Education_level",
    "Family_status": "Marital_status",
    "Housing_type": "Type_of_housing",
    "Occupation_type": "Occupation",
    "Target": "Credit Card Eligibility"
}, inplace=True)

# My goal is to create a visualization, so I change some values ​​in the data frame
replaced_map = {
    "Gender" : {0 : "Male", 1 : "Female"},
    "Has_car" : {0 : "No", 1 : "Yes"},
    "Has_property" : {0 : "No", 1 : "Yes"},
    "Has_work_phone" : {0 : "No", 1 : "Yes"},
    "Has_phone" : {0 : "No", 1 : "Yes"},
    "Has_email" : {0 : "No", 1 : "Yes"},
    "Is_unemployed" : {0 : "No", 1 : "Yes"},
    "Credit Card Eligibility" : {0: "Not eligible", 1 : "Eligible"}
}

replaced_data = data.replace(replaced_map)
print(replaced_data)

# Saving data for visualisation
replaced_data.to_csv("Data_csv")

# Exploratory Data Analysis
print(replaced_data.describe())

import seaborn as sns
import matplotlib.pyplot as plt

sns.countplot(x='Credit Card Eligibility', data=replaced_data)
plt.show()

# Age Distribution
sns.histplot(replaced_data['Age_years'], bins=30, kde=True)
plt.show()

# Income Distribution
sns.histplot(replaced_data['Income'], bins=30, kde=True)
plt.show()

# Identify categorical columns
categorical_cols = data.select_dtypes(include=['object']).columns
print(f"Categorical columns: {categorical_cols}")

# One-Hot Encoding
encoded_data = pd.get_dummies(data, columns=categorical_cols, drop_first=True)

# Display the first few rows of the encoded data
print(encoded_data.head())

import pandas as pd
from scipy.stats import pointbiserialr


# Function to calculate correlations
def calculate_correlations(data, target_column):
    correlations = {}

    for column in data.columns:
        if column == target_column:
            continue

        if data[column].dtype in ['int64', 'float64']:  # Numeric columns
            corr = data[column].corr(data[target_column])
        elif data[column].dtype == 'object':  # Categorical columns
            # Encode categorical data
            encoded = pd.get_dummies(data[column], drop_first=True)
            corr = encoded.apply(lambda x: x.corr(data[target_column])).max()
        else:
            continue

        correlations[column] = corr

    return correlations

# Calculate correlations for all columns
correlations = calculate_correlations(data, 'Credit Card Eligibility')
for col, corr in correlations.items():
    print(f"Correlation between {col} and Target: {corr}")